package
{
	
	import flash.geom.Point;
	import starling.display.Sprite;
	import starling.events.Event;
	import starling.events.Touch;
	import starling.events.TouchEvent;
	import starling.events.TouchPhase;
	import starling.display.DisplayObject;
	
	public class Game extends Sprite
	{
		
		private var mouseX:Number = 0;
		private var mouseY:Number = 0;
		
		private var customSprite:CustomSprite;
		
		public function Game()
		{
			addEventListener(Event.ADDED_TO_STAGE, onAdded);
		
		}
		
		private function onAdded(e:Event):void
		{
			customSprite = new CustomSprite(600, 600);
			addChild(customSprite);
			
			customSprite.x = (stage.stageWidth - customSprite.width >> 1) + (customSprite.width >> 1);
			customSprite.y = (stage.stageHeight - customSprite.height >> 1) + (customSprite.height >> 1);
			stage.addEventListener(Event.ENTER_FRAME, onFrame);
			// we listen to the mouse movement on the stage
			stage.addEventListener(TouchEvent.TOUCH, onTouch);
			// when the sprite is touched
			customSprite.addEventListener(TouchEvent.TOUCH, onTouchedSprite);
		
		}
		
		private function onFrame(e:Event):void
		{
			customSprite.update();
			// easing on the custom sprite position
			customSprite.x -= (customSprite.x - mouseX) * .1;
			customSprite.y -= (customSprite.y - mouseY) * .1;
		
		}
		
		private function onTouch(e:TouchEvent):void
		{
			
			
			var touches:Vector.<Touch> = e.touches;
			trace("Length", touches.length);
			
			
		//	removeChild(clicked);
			
// get the mouse location related to the stage
			var touch:Touch = e.getTouch(stage);
			var pos:Point = touch.getLocation(stage);
			
// store the mouse coordinates
			mouseX = pos.x;
			mouseY = pos.y;
		}
		
		private function onTouchedSprite(e:TouchEvent):void
		{
// get the touch points (can be multiple because of multitouch)
			//		var touch:Touch = e.getTouch(stage);
			//	var clicked:DisplayObject = e.currentTarget as DisplayObject;
// detect the click/release phase
			//if (touch.phase == TouchPhase.ENDED)
			//{
// remove the clicked object
			//	removeChild(clicked);
			// outputs : true
			//	clicked.dispose();
			//	trace(clicked.hasEventListener(e.type));
			
			//	}
			// retrieves the touch points
			var clicked:DisplayObject = e.currentTarget as DisplayObject;
			
			var touches:Vector.<Touch> = e.touches;
			trace("Length", touches.length);
		//	removeChild(clicked);
			if (touches.length == 2)
			{
				var finger1:Touch = touches[0];
				var finger2:Touch = touches[1];
				var distance:int;
				var dx:int;
				var dy:int;
				trace("Length", touches.length);
// if both fingers moving (dragging)
				if (finger1.phase == TouchPhase.MOVED && finger2.phase == TouchPhase.MOVED)
				{
					
// calculate the distance between each axes
					dx = Math.abs(finger1.globalX - finger2.globalX);
					dy = Math.abs(finger1.globalY - finger2.globalY);
// calculate the distance
					distance = Math.sqrt(dx * dx + dy * dy);
					trace(distance);
					clicked.width = distance;
					
					
					/**/
					package
{
import flash.display.Bitmap;
import starling.display.Image;
import starling.display.Sprite;
import starling.events.Event;
import starling.textures.Texture;
import starling.utils.deg2rad;
public class Game2 extends Sprite
{
private var sausagesVector:Vector.<Image> = new Vector.<Image>(NUM_SAUSAGES, true);
private const NUM_SAUSAGES:uint = 400;
[Embed(source="../lib/Assets/img.PNG")]
private static const Sausage:Class;

/ create the loader
var loader:Loader = new Loader();
// load the texture
loader.load ( new URLRequest ("texture.png") );
// when texture is loaded
loader.contentLoaderInfo.addEventListener ( Event.COMPLETE, onComplete );
function onComplete ( e : Event ):void
{
// grab the loaded bitmap
var loadedBitmap:Bitmap = e.currentTarget.loader.content as Bitmap;
// create a texture from the loaded bitmap
var texture:Texture = Texture.fromBitmap ( loadedBitmap )
}
function onComplete ( e : Event ):void
{
// grab the loaded bitmap
var loadedBitmap:Bitmap = e.currentTarget.loader.content as Bitmap;
// create a texture from the loaded bitmap
var texture:Texture = Texture.fromBitmap ( loadedBitmap )
}

public function Game2()
{
addEventListener(Event.ADDED_TO_STAGE, onAdded);
}
private function onAdded (e:Event):void
{
// create a Bitmap object out of the embedded image
var sausageBitmap:Bitmap = new Sausage();
// create a Texture object to feed the Image object
var texture:Texture = Texture.fromBitmap(sausageBitmap);
for (var i:int = 0; i < NUM_SAUSAGES; i++)
{
// create a Image object with our one texture
var image:Image = new Image(texture);
// set a random alpha, position, rotation
image.alpha = Math.random();
// define a random initial position
image.width = 30;
image.height = 30;
image.x = Math.random()*stage.stageWidth
image.y = Math.random()*stage.stageHeight
image.rotation = deg2rad(Math.random()*360);
// show it
addChild(image);
// store references for later
sausagesVector[i] = image;
}
}
}
}
					
